var documenterSearchIndex = {"docs":
[{"location":"toc/#Extended-ToC","page":"Extended ToC","title":"Extended ToC","text":"","category":"section"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"PlutoExtras defines and export an extension of the TableOfContents from PlutoUI. This alternative ToC just wraps the one from PlutoUI and adds functionality to it. It can be called by having a cell that contains the exported function ExtendedTableOfContents","category":"page"},{"location":"toc/#Functionalities","page":"Extended ToC","title":"Functionalities","text":"","category":"section"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"This extended ToC provides the following functionalities:","category":"page"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"Hiding Heading/Cells both from ToC and from the notebook visualization\nCollapsing Headings within the ToC\nSaving the hidden/collapsed status of ToC entries on the notebook file, for persistent state across notebook reload.\nMoving groups of cells (below a common heading) around conveniently from the ToC","category":"page"},{"location":"toc/#Hiding-Heading/Cells","page":"Extended ToC","title":"Hiding Heading/Cells","text":"","category":"section"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"Hiding headings and all connected cells from notebook view can be done via ExtendedTableOfContents","category":"page"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"All cells before the first heading are automatically hidden from the notebook\nAll hidden cells/headings can be shown by pressing the eye button that appears while hovering on the ToC title. \nWhen the hidden cells are being shown, the hidden headings in the ToC are underlined\nHidden status of specific headings in the notebook can be toggled by pressing on the eye button that appears to the left each heading when hovering over them","category":"page"},{"location":"toc/#Collapsing-Headings-in-ToC","page":"Extended ToC","title":"Collapsing Headings in ToC","text":"","category":"section"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"ToC headings are grouped based on heading level, sub-headings at various levels can be collapsed by using the caret symbol that appears to the left of headings in the ToC upon hover.","category":"page"},{"location":"toc/#Save-Hide/Collapsed-status-on-notebook-file","page":"Extended ToC","title":"Save Hide/Collapsed status on notebook file","text":"","category":"section"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"Preserving the status of collapsed/hidden heading is supported by writing to the notebook file using notebook and cell metadata, allowing to maintain the status even upon reload of Julia/Pluto","category":"page"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"When the current collapsed/hidden status of each heading is not reflected in the notebook file, a save icon/button appears on the left of the ToC title upon hover. Clicking the icon saves the current state in the notebook file.","category":"page"},{"location":"toc/#Changing-Headings/Cells-order","page":"Extended ToC","title":"Changing Headings/Cells order","text":"","category":"section"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"The ExtendedTableOfContents allow to re-order the cell groups identified by each heading within the notebook:","category":"page"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"Each cell group is identified by the cell containing the heading, plus all the cells below it and up to the next heading (excluded)\nHolding the mouse on a ToC heading triggers the ability to move headings around\nThe target heading is surrounded by a dashed border\nWhile moving the mouse within the ToC, a visual separator appears to indicate the position where the dragged heading will be moved to, depending on the mouse position\nHovering on collapsed headings for at least 300ms opens them up to allow moving headings within collapsed parents\nBy default, headings can only be moved below or above headings of equal or lower level (H1 < H2 < H3...)\nHolding shift during the dragging process allows to put headings before/after any other heading regardless of the level","category":"page"},{"location":"toc/#Examples","page":"Extended ToC","title":"Examples","text":"","category":"section"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"Open the extended ToC test notebook to check this functionality in action!","category":"page"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"note: Note\nThe notebook must be run from the original folder (test/notebooks) within the PlutoExtras package folder to properly load the PlutoExtras package","category":"page"},{"location":"toc/#State-Manipulation","page":"Extended ToC","title":"State Manipulation","text":"","category":"section"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"(Image: State_Manipulation)","category":"page"},{"location":"toc/#Cell-Reordering","page":"Extended ToC","title":"Cell Reordering","text":"","category":"section"},{"location":"toc/","page":"Extended ToC","title":"Extended ToC","text":"(Image: Cell_Reordering)","category":"page"},{"location":"toc/#API","page":"Extended ToC","title":"API","text":"","category":"section"},{"location":"toc/#PlutoExtras.ExtendedToc.ExtendedTableOfContents","page":"Extended ToC","title":"PlutoExtras.ExtendedToc.ExtendedTableOfContents","text":"ExtendedTableOfContents(;hide_preamble = true, force_hide_enabled = hide_preamble, kwargs...)\n\nKeyword Arguments\n\nhide_preamble -> When true, all the cells from the beginning of the notebook till the first heading are hidden (when the notebook is in hide-enabled state)\nforce_hide_enabled -> Set the notebook hide-enabled status to true when creating the ToC. This status is used to decide whether to show or not hidden cells via CSS.\nkwargs -> The remaining kwargs are simply passed to TableOfContents from PlutoUI which is used internally to generate the ToC.\n\nDescription\n\nExtends the TableOfContents from PlutoUI and adds the following functionality:\n\nHiding Heading/Cells\n\nHiding headings and all connected cells from notebook view can be done via ExtendedTableOfContents\n\nAll cells before the first heading are automatically hidden from the notebook\nAll hidden cells/headings can be shown by pressing the eye button that appears while hovering on the ToC title. \nWhen the hidden cells are being shown, the hidden headings in the ToC are underlined\nHidden status of specific headings in the notebook can be toggled by pressing on the eye button that appears to the left each heading when hovering over them\n\nCollapsing Headings in ToC\n\nToC headings are grouped based on heading level, sub-headings at various levels can be collapsed by using the caret symbol that appears to the left of headings in the ToC upon hover.\n\nSave Hide/Collapsed status on notebook file\n\nPreserving the status of collapsed/hidden heading is supported by writing to the notebook file using notebook and cell metadata, allowing to maintain the status even upon reload of Julia/Pluto\n\nWhen the current collapsed/hidden status of each heading is not reflected in the notebook file, a save icon/button appears on the left of the ToC title upon hover. Clicking the icon saves the current state in the notebook file.\n\nChanging Headings/Cells order\n\nThe ExtendedTableOfContents allow to re-order the cell groups identified by each heading within the notebook:\n\nEach cell group is identified by the cell containing the heading, plus all the cells below it and up to the next heading (excluded)\nHolding the mouse on a ToC heading triggers the ability to move headings around\nThe target heading is surrounded by a dashed border\nWhile moving the mouse within the ToC, a visual separator appears to indicate the position where the dragged heading will be moved to, depending on the mouse position\nHovering on collapsed headings for at least 300ms opens them up to allow moving headings within collapsed parents\nBy default, headings can only be moved below or above headings of equal or lower level (H1 < H2 < H3...)\nHolding shift during the dragging process allows to put headings before/after any other heading regardless of the level\n\nExample usage\n\nState Manipulation\n\n(Image: State_Manipulation)\n\nCell Reordering\n\n(Image: Cell_Reordering)\n\n\n\n\n\n","category":"function"},{"location":"toc/#PlutoExtras.ExtendedToc.show_output_when_hidden","page":"Extended ToC","title":"PlutoExtras.ExtendedToc.show_output_when_hidden","text":"show_output_when_hidden(x)\n\nWraps the given input x inside a custom HTML code created with HypertextLiteral.@htl that adds the always-show-output attribute to the calling Pluto cell.\n\nThis makes sure that the cell output remains visible in the HTML even when the cell is hidden using the ExtendedTableOfContents cell hiding feature. This is mostly useful to allow having cells that generate output to be rendered within the notebook as hidden cells.\n\nThe provided attribute will make sure (via CSS) that cell will look exactly like a hidden cell except for its output element. When the output is floating (like for BondTable or ExtendedTableOfContents), this will make the cell hidden while the rendered output visible.\n\nExample usage\n\nBondTable([bonds...]) |> show_output_when_hidden\n\nThe code above will allow putting the cell defining the BondTable within a hidden part of the notebook while still rendering the floating BondTable. Without this function, the BondTable generating cell would need to be located inside a non-hidden part of the notebook.\n\nNote\n\nWhen calling this function with an input object that is not of type HTML or HypertextLiteral.Result, the function will wrap the object first using @htl and PlutoRunner.embed_display. Since the embed_display function is only available inside of Pluto,  \n\n\n\n\n\n","category":"function"},{"location":"latex_equations/#LaTeX-Equations","page":"LaTeX Equations","title":"LaTeX Equations","text":"","category":"section"},{"location":"latex_equations/","page":"LaTeX Equations","title":"LaTeX Equations","text":"PlutoExtras provides some convenience functions to display numbered equations using KaTeX. The use of KaTeX as opposed to Mathjax as in Markdown is that complex interpolation of Julia variables work better and automatic equation numbering based on the cell position in the notebook is possible.","category":"page"},{"location":"latex_equations/","page":"LaTeX Equations","title":"LaTeX Equations","text":"KaTeX supports automatic numbering of equation environments.  While it does not support equation reference and labelling, this hack on github shows how to achieve the label functionality.","category":"page"},{"location":"latex_equations/","page":"LaTeX Equations","title":"LaTeX Equations","text":"Unfortunately, since automatic numbering in KaTeX uses CSS counters, it is not possible to access the value of the counter at a specific DOM element.  We then create a function that loops through all possible katex equation and counts them, putting the relevant number in the appropriate hyperlink innerText to create equation references that automatically update.","category":"page"},{"location":"latex_equations/","page":"LaTeX Equations","title":"LaTeX Equations","text":"If one wants the exploit equation referencing with automatic numbering update, this functionality must be initialized by having a cell which calls initialize_eqref as its last statement (so that the javascript code it generates is sent to the cell output)","category":"page"},{"location":"latex_equations/#Example","page":"LaTeX Equations","title":"Example","text":"","category":"section"},{"location":"latex_equations/","page":"LaTeX Equations","title":"LaTeX Equations","text":"<video controls=true>\n<source src=\"https://user-images.githubusercontent.com/12846528/264626063-1dd7ca9b-9463-4e27-b1ac-d8b2a860ea9b.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"latex_equations/","page":"LaTeX Equations","title":"LaTeX Equations","text":"Open the latex test notebook to check this functionality in action!","category":"page"},{"location":"latex_equations/","page":"LaTeX Equations","title":"LaTeX Equations","text":"note: Note\nThe notebook must be run from the original folder (test/notebooks) within the PlutoExtras package folder to properly load the PlutoExtras package","category":"page"},{"location":"latex_equations/#API","page":"LaTeX Equations","title":"API","text":"","category":"section"},{"location":"latex_equations/#PlutoExtras.LaTeXEqModule.initialize_eqref","page":"LaTeX Equations","title":"PlutoExtras.LaTeXEqModule.initialize_eqref","text":"initialize_eqref()\n\nWhen run in a Pluto cell, this function generates the necessary javascript to correctly handle and display latex equations made with texeq and equation references made with eqref\n\n\n\n\n\n","category":"function"},{"location":"latex_equations/#PlutoExtras.LaTeXEqModule.texeq","page":"LaTeX Equations","title":"PlutoExtras.LaTeXEqModule.texeq","text":"texeq(code::String)\n\nTake an input string and renders it inside an equation environemnt (numbered) using KaTeX\n\nEquations can be given labels by adding \"\\\\label{name}\" inside the code string and subsequently referenced in other cells using eqref(\"name\")\n\nNote\n\nTo avoid the need of doubling backslashes, use the new @texeq_str macro if you are on Pluto ≥ v0.17\n\n\n\n\n\n","category":"function"},{"location":"latex_equations/#PlutoExtras.LaTeXEqModule.@texeq_str","page":"LaTeX Equations","title":"PlutoExtras.LaTeXEqModule.@texeq_str","text":"@texeq_str -> katex_html_code\n\nUse to generate an HTML output that when rendered in Pluto shows latex equation using KaTeX.\n\nRelies on texeq but avoids the need of double escaping backslashes.\n\nExamples\n\ntexeq\"\n\\frac{q \\sqrt{2}}{15} + 42\n\"\n\n\n\n\n\n","category":"macro"},{"location":"latex_equations/#PlutoExtras.LaTeXEqModule.eqref","page":"LaTeX Equations","title":"PlutoExtras.LaTeXEqModule.eqref","text":"eqref(label::String)\n\nFunction that create an hyperlink pointing to a previously defined labelled equation using texeq()\n\n\n\n\n\n","category":"function"},{"location":"structbond/#StructBond-Module","page":"StructBond Module","title":"StructBond Module","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The StructBondModule submodule of PlutoExtras defines and exports functionality to easily create widgets for custom structure and combine multiple bonds together in a convenient floating side table.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"note: Note\nThe StructBondModule is currently not re-exported by PlutoExtras so it has to be explicitly used with using PlutoExtras.StructBondModule","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"Open the structbond module notebook static html to see the look of the widgets exported.\nOr open the related notebook directy in Pluto to check their functionality in action!","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"note: Note\nThe notebook must be run from the original folder (test/notebooks) within the PlutoExtras package folder to properly load the PlutoExtras package","category":"page"},{"location":"structbond/#StructBond","page":"StructBond Module","title":"StructBond","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"Generating automatic widgets for custom structs is quite straightforward with the aid of the @fielddata macro and the StructBond type.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The StructBond structure wraps another structure and generates a widget that can be used together with @bind to obtain instances of a custom structure. In order to correctly display the widget, the description and widget associated to each field of the structure must be specified either.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"This can be done either using @fielddata as in the example video below or by using the separate @fieldbond and @fielddescription separately.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"<video controls=true>\n<source src=\"https://user-images.githubusercontent.com/12846528/264639467-ecda1c22-141a-4297-98d7-0667d2e8d5a4.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"structbond/#@NTBond","page":"StructBond Module","title":"@NTBond","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"Sometimes custom structs are not needed and it would be useful to just use the same nice bond structure of StructBond to simply create arbitrary NamedTuples. ","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"This is possible with the convenience macro @NTBond which can be called as shown below to create a nice display for an interactive bond creating an arbitrary NamedTuple.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The macro simply create a StructBond wrapping the desired NamedTuple type.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"<video controls=true>\n<source src=\"https://user-images.githubusercontent.com/12846528/264640510-c605d3af-77c8-4752-9b80-8bc85545d566.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"structbond/#Transforming-the-resulting-NamedTuple","page":"StructBond Module","title":"Transforming the resulting NamedTuple","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"Since version v0.7.16, it is possible to PlutoUI.Experimental.transformed_value to transform the resulting value of the NamedTuple return by the @NTBond macro by either providing a third argument to the macro (acting on the full NamedTuple) or by using the @tv decorator directly when defining the bond for a specific field:","category":"page"},{"location":"structbond/#Transforming-the-full-NamedTuple","page":"StructBond Module","title":"Transforming the full NamedTuple","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"When calling the macro with a third argument, this is interpreted as a function that is used to create a bond transformation using PlutoUI.Experimental.transformed_value.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"This means that the two expressions below yield the same result:","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"@NTBond \"WoW\" begin\n\ta = (\"Description\", Slider(1:10))\nend x -> x.a + 2","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"and","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"PlutoUI.Experimental.transformed_value(x -> x.a + 2, @NTBond \"WoW\" begin\n\ta = (\"Description\", Slider(1:10))\nend)","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"note: Note\nThe synthax accepting a function to transformed the resulting NamedTuple also has a convenience shorthand where _ can be used to represent the original bond value.The above example could then also be written as:@NTBond \"WoW\" begin\n    a = (\"Description\", Slider(1:10))\nend _.a + 2","category":"page"},{"location":"structbond/#Transforming-a-single-field","page":"StructBond Module","title":"Transforming a single field","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"For the use directly at field level, it is sufficient to use the @tv decorator in place of the bond widget directly, using the following form and as shown in the image below:","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"    @tv transform_function widget","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"(Image: @tv decorator)","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"note: Note\nThe @tv decorator is not a macro actually defined within PlutoExtras, but is directly parsed during the macro expansion of @NTBond.","category":"page"},{"location":"structbond/#StructBondSelect","page":"StructBond Module","title":"StructBondSelect","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"Sometimes, one wants to create a more complex binding where the number of parameters to control a bond can vary depending on some other variable. The StructBondSelect can be of help in some of these cases, by providing a way to select out of a number of arbitrary StructBonds (which include @NTBond) by using a dropdown to select the one to be displayed and used for generating the StructBondSelect widget's output.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"This structure can be constructed with a vector of StructBond or transformed_value(f, ::StructBond) elements, and will take care of generating an appropriate widget to display and process only the selected one.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The main signature of the constructor is the following:","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"StructBondSelect(els::Vector; description = \"StructBondSelect\", default_idx = 1, selector_text = \"Selector\")","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The names to select upon will be taken from the description of the provided StructBonds, while the text displayed next to the selector will default to Selector but can be customized with the selector_text kwarg to the constructor. The description kwarg can be used to customize the text in the widget container (similar to the same kwarg in StructBond and to @NTBond). Finally, the default_idx should be an integer and will select which of the provided StructBonds will be selected as default when instantiating the widget.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"<video controls=true>\n<source src=\"https://raw.githubusercontent.com/disberd/PlutoExtras.jl/assets/videos/structbond_select_example.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"structbond/#@BondsList","page":"StructBond Module","title":"@BondsList","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"In some cases, one does not want to have a single bond wrapping either a Structure or a NamedTuple because single independent bonds are more convenient.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"@BondsList is a convenience macro to create an object of type BondsList which simply allow to add a description to separate bonds and group them all together in a table-like format equivalent to those of StructBond.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"note: Note\nUnlike StructBond, a BondsList is already composed of bond created with @bind and it just groups them up with a description. The output of @BondsList is not supposed to be bound to a variable using @bind.\nThe bonds grouped in a BondsList still act and update independently from one another.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"See the example below for understanding the synthax. The header of a BondsList is shown in an orange background to easily differentiate it from StructBond.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"<video controls=true>\n<source src=\"https://user-images.githubusercontent.com/12846528/264641605-7ab58c12-2c30-47c3-a93a-d64784c34a71.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"structbond/#Popout/popoutwrap","page":"StructBond Module","title":"Popout/popoutwrap","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The structures above can also be used nested within one another. To facilitate accessing nested structures, one can use the Popout type.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"In its simple form, you can give an instance of a StructBond, a bond wrapping a StructBond or a BondsList as input to Popout to create a table that is hidden behind a popup window. If an instance present, but you want a custom type for which you have defined custom bonds and descriptions with @fielddata to appear as popout, you can use the function popoutwrap(TYPE) to generate a small icon which hides a popup containing the StructBond of the provided type TYPE.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The StructBond table appears on hover upon the icon, can be made fixed by clicking on the icon and can then be moved around or resized. A double click on the header of the popout hides it again:","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"<video controls=true>\n<source src=\"https://user-images.githubusercontent.com/12846528/264643126-cdf19078-70cb-46e2-aeb0-304a05ecf08a.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The ability to also wrap pre-existing bonds around StructBonds is convenient for organizing the various bonds one have in a BondsList or BondTable","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"As an example, one can create a BondsList containing the two StructBond bonds generated at the beginning of this notebook (the videos in the structbond section above) like in the following example:","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"<video controls=true>\n<source src=\"https://user-images.githubusercontent.com/12846528/264645841-263f0cb3-ac79-4fe2-b66a-f8d5a4a70896.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"structbond/#BondTable","page":"StructBond Module","title":"BondTable","text":"","category":"section"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The final convenience structure provided by this module is the BondTable. It can be created to group a list of bonds in a floating table that stays on the left side of the notebook (similar to the TableOfContents of PlutoUI) and can be moved around and resized or hidden for convenience.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"The BondTable is intended to be used either with bonds containing StructBond or with BondsList. Future types with similar structure will also be added.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"Here is an example of a bondtable containing all the examples seen so far.","category":"page"},{"location":"structbond/","page":"StructBond Module","title":"StructBond Module","text":"<video controls=true>\n<source src=\"https://user-images.githubusercontent.com/12846528/264646632-8c1b3eed-1adf-434b-925a-d57b99fc3c29.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"structbond/#API","page":"StructBond Module","title":"API","text":"","category":"section"},{"location":"structbond/#Main","page":"StructBond Module","title":"Main","text":"","category":"section"},{"location":"structbond/#PlutoExtras.StructBondModule.StructBond","page":"StructBond Module","title":"PlutoExtras.StructBondModule.StructBond","text":"StructBond(T;description = typedescription(T))\n\nCreate an HTML widget to be used with @bind from Pluto that allows to define the custom type T by assigning a widget to each of its fields.  The widget will automatically use the docstring of each field as its description if present, or the fieldname otherwise.\n\nWhen used with @bind, it automatically generates a instance of T by using the various fields as keyword arguments. *This means that the the structure T has to support a keyword-only contruction, such as those generated with Base.@kwdef or Parameters.@with_kw.\n\nIn order to work, the widget (and optionally the description) to associate to eachfield of type T has to be provided using the convenience macro @fielddata. \n\nThe optional description kwarg default to the Type name but can be overridden with anything showable as MIME\"text/html\" \n\nSee also: BondTable, @NTBond, @BondsList, Popout, popoutwrap, @fielddata, @fieldhtml, @typeasfield, @popoutasfield\n\n\n\n\n\n","category":"type"},{"location":"structbond/#PlutoExtras.StructBondModule.@fielddata","page":"StructBond Module","title":"PlutoExtras.StructBondModule.@fielddata","text":"@fielddata typename block\n\nConvenience macro to define custom widgets for each field of typename. This is mostly inteded to be used in combintation with StructBond.\n\nGiven for example the following structure ASD, one can create a nice widget to create instances of type ASD wih the following code:\n\nbegin\nBase.@kwdef struct ASD\n\ta::Int \n\tb::Int\n\tc::String\n\td::String\nend\n@fielddata ASD begin\n\ta = (md\"Magical field with markdown description\", Slider(1:10))\n\tb = (@htl(\"<span>Field with HTML description</span>\"), Scrubbable(1:10))\n\tc = (\"Normal String Description\", TextField())\n\td = TextField()\nend\n@bind asd StructBond(ASD)\nend\n\nwhere asd will be an instance of type ASD with each field interactively controllable by the specified widgets and showing the field description next to each widget. The rightside argument of each :(=) in the block can either be a single element or a tuple of 2 elements. In case a single elemnent is provided, the provided value is interpreted as the fieldbond, so the bond/widget to show for that field.  If two elements are given, the first is assigned to the description and the second as the bond to show\n\nSee also: BondTable, StructBond, @NTBond, Popout, popoutwrap, @fieldbond, @fielddescription, @fieldhtml, @typeasfield, @popoutasfield\n\n\n\n\n\n","category":"macro"},{"location":"structbond/#PlutoExtras.StructBondModule.@NTBond","page":"StructBond Module","title":"PlutoExtras.StructBondModule.@NTBond","text":"@NTBond description block\n@NTBond description block transform_function\n\nConvenience macro to create a StructBond wrapping a NamedTuple with field names provided in the second argument block.\n\nUseful when one wants a quick way of generating a bond that creates a NamedTuple. An example usage is given in the code below:\n\n@bind nt @NTBond \"My Fancy NTuple\" begin\n\ta = (\"Description\", Slider(1:10))\n\tb = (md\"*Bold* field\", Slider(1:10))\n\tc = Slider(1:10) # No description, defaults to the name of the field\nend\n\nwhich will create a NamedTuple{(:a, :b, :c)} and assign it to variable nt.\n\nWhen calling the macro with a third argument, this is interpreted as a function that is used to create a bond transformation using PlutoUI.Experimental.transformed_value.\n\nThis means that the two expressions below yield the same result:\n\n@NTBond \"WoW\" begin\n\ta = (\"Description\", Slider(1:10))\nend x -> x.a + 2\n\nand\n\nPlutoUI.Experimental.transformed_value(x -> x.a + 2, @NTBond \"WoW\" begin\n\ta = (\"Description\", Slider(1:10))\nend)\n\nnote: Note\nThe synthax accepting a function to transformed the resulting NamedTuple also has a convenience shorthand where _ can be used to represent the original bond value.The above example could then also be written as:@NTBond \"WoW\" begin\n    a = (\"Description\", Slider(1:10))\nend _.a + 2\n\nSee also: BondTable, @NTBond, @BondsList, Popout\n\nExtended Help\n\ntransform single fields\n\nSince version 0.7.16, the @NTBond macro supports a convenience decorator to transform a single field. This is done by using the @tv decorator, which is a shorthand for PlutoUI.Experimental.transformed_value.\n\n@tv is not a macro actually defined within PlutoExtras, but is directly parsed during the macro expansion of @NTBond. See the image below for an example of how to use it:\n\n(Image: @tv decorator)\n\nMarkdown math in description\n\nSince version 0.7.16, the @NTBond macro supports providing a description as anything that has a valid MIME\"text/html\" representation. This includes markdown with math inside!\n\nSee the image below for an example of how to use it:\n\n(Image: @NTBond with math (using markdown) in description)\n\n\n\n\n\n","category":"macro"},{"location":"structbond/#PlutoExtras.StructBondModule.@BondsList","page":"StructBond Module","title":"PlutoExtras.StructBondModule.@BondsList","text":"@BondsList description block\n\nConvenience macro to create a BondsList, which is a grouping of a various bonds (created with @bind) inside a table-like HTML output that can be used inside BondTable. Each bond can additionally be associated to a custom description. The block given as second input to this macro must be a begin or let block where each line is an assignment of the type description = bond. The description can be anything that has a show method for MIME type text/html.\n\nAn example usage is given in the code below:\n\n@BondsList \"My Group of Bonds\" let tv = PlutoUI.Experimental.transformed_value\n\t # We use transformed_value to translate GHz to Hz in the bound variable `freq`\n\t\"Frequency [GHz]\" = @bind freq tv(x -> x * 1e9, Slider(1:10))\n\tmd\"Altitude ``h`` [m]\" = @bind alt Scrubbable(100:10:200)\nend\n\nwhich will create a table-like display grouping together the bonds for the frequency freq and the altitude alt.\n\nUnlike StructBond, the output of @BondsList is not supposed to be bound using @bind, as it just groups pre-existing bonds. Also unlike StructBond, each row of a BondsList upates its corresponding bond independently from the other rows.\n\nTo help identify and differentiate a BondsList from a StructBond\n\nSee also: BondTable, @NTBond, StructBond, Popout, popoutwrap, @fielddata, @fieldhtml, @typeasfield, @popoutasfield\n\n\n\n\n\n","category":"macro"},{"location":"structbond/#PlutoExtras.StructBondModule.popoutwrap","page":"StructBond Module","title":"PlutoExtras.StructBondModule.popoutwrap","text":"popoutwrap(T)\n\nConvenience function to construct a Popout wrapping a StructBond of type T. This is convenient when one wants to create nested StructBond types.\n\nGiven for example the following two structures\n\nBase.@kwdef struct ASD\n\ta::Int \n\tb::Int\n\tc::String\nend\nBase.@kwdef struct LOL\n\tasd::ASD \n\ttext::String\nend\n\none can create a nice widget to create instances of type LOL that also include a popout of widget generating ASD wih the following code:\n\n# Define the widget for ASD\n@fieldbond ASD begin\n\ta = Slider(1:10)\n\tb = Scrubbable(1:10)\n\tc = TextField()\nend\n@fielddescription ASD begin\n\ta = md\"Magical field with markdown description\"\n\tb = @htl \"<span>Field with HTML description</span>\"\n\tc = \"Normal String Description\"\nend\n\n# Define the widget for LOL\n@fieldbond LOL begin\n\tasd = popoutwrap(ASD)\n\ttext = TextField(;default = \"Some Text\")\nend\n@fielddescription LOL begin\n\tasd = \"Click on the icon to show the widget to generate this field\"\n\ttext = \"Boring Description\"\nend\n@bind lol StructBond(LOL)\n\nwhere lol will be an instance of type LOL with each field interactively controllable by the specified widgets and showing the field description next to each widget.\n\nSee also: BondTable, StructBond, Popout, @fieldbond, @fielddescription, @fieldhtml, @typeasfield, @popoutasfield\n\n\n\n\n\n","category":"function"},{"location":"structbond/#PlutoExtras.StructBondModule.BondTable","page":"StructBond Module","title":"PlutoExtras.StructBondModule.BondTable","text":"BondTable(bondarray; description, collapsed)\n\nTake as input an array of bonds and creates a floating table that show all the bonds in the input array. \n\nIf description is not provided, it defaults to the text BondTable. Description can be either a string or a HTML output.\n\nThe optional collapsed kwarg can be used to specify whether the BondTable should stay collapsed or not when shown. If not provided, the BondTable will not be collapsed.\n\nThe collapsed status of the BondTable is persistent across reactive runs of the cell showing the BondTable.\n\nSee also: StructBond, Popout, popoutwrap, @fieldbond, @fielddescription, @fieldhtml, @typeasfield, @popoutasfield\n\n\n\n\n\n","category":"type"},{"location":"structbond/#PlutoExtras.StructBondModule.StructBondSelect","page":"StructBond Module","title":"PlutoExtras.StructBondModule.StructBondSelect","text":"A widget to select one subwidget out of an array of provided elements, which can be either StructBond or the resulting form transformed_value(f, ::StructBond).\n\nThis will show a selection dropdown to choose the subwidget to display and use for generating the StructBondSelect output when coupled with @bind.\n\nSee the extended help below for a GIF example or the docs page for a video one.\n\nConstructor\n\nStructBondSelect(els::Vector[, selectors::Vector{String}]; description = \"StructBondSelect\", default_idx = 1, selector_text = \"Selector\")\n\nArguments\n\nels: A vector of StructBond or transformed_value(f, ::StructBond) elements.\nselectors: A vector of strings to be used as the names to select upon. If not provided, the names will be taken from the description of the provided StructBond elements.\n\nKeyword Arguments\n\ndescription: A string to be used as the description of the widget, defaults to \"StructBondSelect\".\ndefault_idx: The index of the element to be selected by default for display/output, defaults to 1.\nselector_text: The text to be displayed next to the selector dropdown, defaults to \"Selector\".\n\nExtended Help\n\nSee this gif for a visual example: (Image: structbondselect-example-gif)\n\nSee also: StructBond, @NTBond\n\n\n\n\n\n","category":"type"},{"location":"structbond/#Secondary/Advanced","page":"StructBond Module","title":"Secondary/Advanced","text":"","category":"section"},{"location":"structbond/#PlutoExtras.StructBondModule.@fieldbond","page":"StructBond Module","title":"PlutoExtras.StructBondModule.@fieldbond","text":"@fieldbond typename block\n\nConvenience macro to define custom widgets for each field of typename. This is mostly inteded to be used in combintation with StructBond.\n\nGiven for example the following structure\n\nBase.@kwdef struct ASD\n\ta::Int \n\tb::Int\n\tc::String\nend\n\none can create a nice widget to create instances of type ASD wih the following code:\n\n@fieldbond ASD begin\n\ta = Slider(1:10)\n\tb = Scrubbable(1:10)\n\tc = TextField()\nend\n@fielddescription ASD begin\n\ta = md\"Magical field with markdown description\"\n\tb = @htl \"<span>Field with HTML description</span>\"\n\tc = \"Normal String Description\"\nend\n@bind asd StructBond(ASD)\n\nwhere asd will be an instance of type ASD with each field interactively controllable by the specified widgets and showing the field description next to each widget.\n\nSee also: BondTable, StructBond, Popout, popoutwrap, @fielddescription, @fieldhtml, @typeasfield, @popoutasfield\n\n\n\n\n\n","category":"macro"},{"location":"structbond/#PlutoExtras.StructBondModule.@fielddescription","page":"StructBond Module","title":"PlutoExtras.StructBondModule.@fielddescription","text":"@fielddescription typename block\n\nConvenience macro to define custom descriptions for the widgets of each field of typename. This is mostly inteded to be used in combintation with StructBond.\n\nGiven for example the following structure\n\nBase.@kwdef struct ASD\n\ta::Int \n\tb::Int\n\tc::String\nend\n\none can create a nice widget to create instances of type ASD wih the following code:\n\n@fieldbond ASD begin\n\ta = Slider(1:10)\n\tb = Scrubbable(1:10)\n\tc = TextField()\nend\n@fielddescription ASD begin\n\ta = md\"Magical field with markdown description\"\n\tb = @htl \"<span>Field with HTML description</span>\"\n\tc = \"Normal String Description\"\nend\n@bind asd StructBond(ASD)\n\nwhere asd will be an instance of type ASD with each field interactively controllable by the specified widgets and showing the field description next to each widget.\n\nSee also: BondTable, StructBond, Popout, popoutwrap, @fieldbond, @fieldhtml, @typeasfield, @popoutasfield\n\n\n\n\n\n","category":"macro"},{"location":"structbond/#PlutoExtras.StructBondModule.Popout","page":"StructBond Module","title":"PlutoExtras.StructBondModule.Popout","text":"Popout(T)\n\nCreate an HTML widget wrapping the widget T and showing it either on hover or upon click.\n\nThis is useful to generat widgets to be used with StructBond for custom fields whose types are custom Types.\n\nThe convenience function popoutwrap can be used to directly create a Popup of a StructBond{T} to facilitate nested StructBond views.\n\nSee also: BondTable, StructBond, popoutwrap, @fieldbond, @fielddescription, @fieldhtml, @typeasfield, @popoutasfield\n\n\n\n\n\n","category":"type"},{"location":"structbond/#PlutoExtras.StructBondModule.@popoutasfield","page":"StructBond Module","title":"PlutoExtras.StructBondModule.@popoutasfield","text":"@popoutasfield T\n@popoutasfield T1 T2 ...\n\nThis macro will make the default widget for fields of type T a Popout wrapping a StructBond{T} type. For this to work, the StructBond{T} must have a default widget associated to each of its field, either by using @fieldbond or @typeasfield\n\nExample (in Pluto)\n\n# ╔═╡ 8db82e94-5c81-4c52-9228-7e22395fb68f\nusing PlutoExtras.StructBondModule\n\n# ╔═╡ 86a80228-f495-43e8-b1d4-c93b7b52c8d8\nbegin\n\t@kwdef struct MAH\n\t\ta::Int\n\tend\n\t@kwdef struct BOH\n\t\tmah::MAH\n\tend\n\t\n\t# This will make the default widget for an Int a Slider\n\t@typeasfield Int = Slider(1:10)\n\t# This will make the default widget for fields of type ASD a popout that wraps a StructBond{ASD}\n\t@popoutasfield MAH\n\t\n\t@bind boh StructBond(BOH)\nend\n\n# ╔═╡ 2358f686-1950-40f9-9d5c-dac2d98f4c24\nboh === BOH(MAH(1))\n\n\n\n\n\n","category":"macro"},{"location":"structbond/#PlutoExtras.StructBondModule.@typeasfield","page":"StructBond Module","title":"PlutoExtras.StructBondModule.@typeasfield","text":"@typeasfield T = Widget\n@typeasfield begin\n\tT1 = Widget1\n\tT2 = Widget2\n\t...\nend\n\nMacro to give a default widget for a specific type T, T1, or T2. This can be over-ridden by specifying a more specific default for a custom type using @fieldbond When a custom type is wrapped inside a StructBond and a custom widget for one of its field is not defined, the show method will use the one defined by this macro for the field type.\n\nExamples\n\nThe following julia code will error because a default widget is not defined for field a\n\nusing PlutoExtras.StructBondModule\nstruct ASD \n\ta::Int\nend\nStructBond(ASD)\n\nApart from defining a specific value for ASD with @fieldbond, one can also define a default widget for Int with:\n\n@typeasfield Int = Slider(1:10)\n\nNow calling StructBond(ASD) will not error and will default to showing a Slider(1:10) as bond for field a of ASD.\n\n\n\n\n\n","category":"macro"},{"location":"#PlutoExtras","page":"PlutoExtras","title":"PlutoExtras","text":"","category":"section"},{"location":"","page":"PlutoExtras","title":"PlutoExtras","text":"Documentation for PlutoExtras.","category":"page"},{"location":"#Outline","page":"PlutoExtras","title":"Outline","text":"","category":"section"},{"location":"","page":"PlutoExtras","title":"PlutoExtras","text":"Pages = [\n    \"basic_widgets.md\",\n    \"latex_equations.md\",\n    \"toc.md\",\n    \"structbond.md\",\n]\nDepth = 1","category":"page"},{"location":"basic_widgets/#Basic-Widgets","page":"Basic Widgets","title":"Basic Widgets","text":"","category":"section"},{"location":"basic_widgets/","page":"Basic Widgets","title":"Basic Widgets","text":"This Package exports two basic widgets: Editable and StringOnEnter","category":"page"},{"location":"basic_widgets/#Editable","page":"Basic Widgets","title":"Editable","text":"","category":"section"},{"location":"basic_widgets/#PlutoExtras.Editable","page":"Basic Widgets","title":"PlutoExtras.Editable","text":"Editable(x::Real; [prefix, suffix, format])\n\nCreate a Pluto widget similar to Scrubbable from PlutoUI but that can contain an arbitrary (Real) number provided as input.\n\nThe displayed HTML will create a span with a blue background which contains the number and is preceded by an optional text prefix and an optional text suffix. If format is specified, it will be used to format the shown number using the d3-format specification.\n\nThe widget will trigger a bond update only upon pressing Enter or moving the focus out of the widget itself.\n\n(Image: 79f77981-2c53-4ff0-bd13-8213519e0bca)\n\nKeyword Arguments\n\nprefix::AbstractString: A string that will be inserted in the displayed HTML before the number. Clicking on the suffix will select the full text defining the number\nsuffix::AbstractString: A string that will be inserted in the displayed HTML after the number. Clicking on the suffix will select the full text defining the number\nformat::AbstractString: A string specifing the format to use for displaying the number in HTML. Uses the d3-format specification\n\n\n\n\n\nEditable(x::Bool[, true_string=\"true\", false_string=\"false\")\n\nCreate a Pluto widget that contain a Boolean value.\n\nThe displayed HTML will create a span with a green background that displays the custom string true_string when true and the false_string when false. If not provided, the second argument true_string defaults to \"true\" and the third one the \"false\".\n\nThe widget will trigger a bond update when clicking on it.\n\n(Image: 991b712a-d62d-4036-b096-fe0fc52c9b25)\n\n\n\n\n\n","category":"type"},{"location":"basic_widgets/#StringOnEnter","page":"Basic Widgets","title":"StringOnEnter","text":"","category":"section"},{"location":"basic_widgets/#PlutoExtras.StringOnEnter","page":"Basic Widgets","title":"PlutoExtras.StringOnEnter","text":"StringOnEnter(default::AbstractString)\n\nCreates a Pluto widget that allows to provide a string as output when used with @bind.\n\nUnlike the custom \"TextField\" from PlutoUI this only triggers a bond update upon pressing Enter or moving the focus out of the widget (similar to Editable)\n\nWhen rendered in HTML, the widget text will be shown with a dark yellow background.\n\n(Image: 868c1c6e-8731-4465-959e-58cf551b9f61)\n\n\n\n\n\n","category":"type"}]
}
